@using GrupoBIOS.Presentation.WebUI.Service.Excepcion
@using System.ComponentModel.DataAnnotations
@inject IExcepcionService ExcepcionService;
@inject SnackBarService snackBarService
@inject IAuthService AuthService
<MudPaper Class="p-4">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AgregarNuevo">Nuevo</MudButton>

    <EditForm Model="Model">
        <MudTable Items="Model" Bordered="true" Elevation="0">
            <HeaderContent>
                <MudTh>Planta</MudTh>
                <MudTh>NIT</MudTh>
                <MudTh>Nombre Cliente</MudTh>
                <MudTh>Estado</MudTh>
                <MudTh>Acción</MudTh>
            </HeaderContent>
            <RowTemplate Context="item">
                <MudTd>
                    <MudTextField T="string" @bind-Value="item.Planta" MaxLength="255" For="@(() => item.Planta)" />
                    <ValidationMessage For="@(() => item.Planta)" />
                </MudTd>
                <MudTd>
                    <MudTextField T="string" @bind-Value="item.Nit" MaxLength="50" For="@(() => item.Nit)" />
                    <ValidationMessage For="@(() => item.Nit)" />
                </MudTd>
                <MudTd>
                    <MudTextField T="string" @bind-Value="item.NombreCliente" MaxLength="255" For="@(() => item.NombreCliente)" />
                    <ValidationMessage For="@(() => item.NombreCliente)" />
                </MudTd>

                <MudTd>
                    <MudChip T="string" Color="@(item.Estado ? Color.Success : Color.Default)">
                        @(item.Estado ? "Activo" : "Inactivo")
                    </MudChip>
                </MudTd>
                <MudTd>
                    <MudButton Color="@(item.Estado ? Color.Error : Color.Success)" OnClick="@(() => CambiarEstado(item))">
                        @(item.Estado ? "Inactivar" : "Activar")
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </EditForm>

    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GuardarCambios" Class="mt-4">
        Guardar Cambios
    </MudButton>

</MudPaper>

@code {
    [Parameter]
    public List<ExcepcionDTO> Model { get; set; } = new List<ExcepcionDTO>();

    [Parameter]
    public int IdCompania { get; set; } = 0;

    [Parameter]
    public EventCallback OnGuardar { get; set; }

    private void AgregarNuevo()
    {
        var nueva = new ExcepcionDTO();
        nueva.Estado = true;
        nueva.IdCompania = IdCompania;
        Model.Add(nueva);
    }

    private void CambiarEstado(ExcepcionDTO excepcion)
    {
        excepcion.Estado = !excepcion.Estado;
    }


    private async Task GuardarCambios()
    {
        var isValid = true;
        
        foreach (var excepcion in Model)
        {
            excepcion.CreadoPor = await AuthService.GetUserNameAsync();
            var validationContext = new ValidationContext(excepcion);
            var results = new List<ValidationResult>();
            if (!Validator.TryValidateObject(excepcion, validationContext, results, true))
            {
                isValid = false;
            }
        }

        if (!isValid)
        {
            snackBarService.ShowSnackBar("Por favor llenar todos los campos.", Severity.Warning, Defaults.Classes.Position.TopEnd);
            return;
        }

        var result = await ExcepcionService.Register(Model);
        if (result == "OK")
        {
            snackBarService.ShowSnackBar("El registro se ha actualizado exitosamente.", Severity.Success, Defaults.Classes.Position.TopEnd);
        }
        else
        {
            snackBarService.ShowSnackBar("Ha ocurrido un error al registrar la compañía.", Severity.Error, Defaults.Classes.Position.TopEnd);
        }
        await OnGuardar.InvokeAsync();
    }
}
