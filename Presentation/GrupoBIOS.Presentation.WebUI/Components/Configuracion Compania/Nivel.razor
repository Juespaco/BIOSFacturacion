@using GrupoBIOS.Presentation.WebUI.Service.Nivel
@using System.ComponentModel.DataAnnotations
@inject INivelService NivelService;
@inject SnackBarService snackBarService
@inject IAuthService AuthService
<MudPaper Class="p-4">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AgregarNuevo">Nuevo</MudButton>

    <EditForm Model="Model">
        <MudTable Items="Model" Bordered="true" Elevation="0">
            <HeaderContent>
                <MudTh>Centro Operativo</MudTh>
                <MudTh>Nombre Nivel</MudTh>
                <MudTh>Días Gracia</MudTh>
                <MudTh>Días Cobertura</MudTh>
                <MudTh>Posición</MudTh>
                <MudTh>Primer Cobro</MudTh>
                <MudTh>Segundo Cobro</MudTh>
            </HeaderContent>
            <RowTemplate Context="item">
                <MudTd>
                    <MudSelect T="int" @bind-Value="item.NivelCentroOperativo" Dense="true">
                        <MudSelectItem T="int" Value="0" Disabled>Seleccione</MudSelectItem>
                        @foreach (var centro in Centros)
                        {
                            <MudSelectItem T="int" Value="centro.IDCentroOperativo">@centro.NombreCO</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd><MudTextField T="string" @bind-Value="item.NivelNombre" MaxLength="510" /></MudTd>
                <MudTd><MudNumericField T="int" @bind-Value="item.NivelDiasGracia" /></MudTd>
                <MudTd><MudNumericField T="int" @bind-Value="item.NivelDiasCobertura" /></MudTd>
                <MudTd><MudNumericField T="double" @bind-Value="item.NivelPosicion" /></MudTd>
                <MudTd><MudNumericField T="int" @bind-Value="item.NivelPrimerCobro" /></MudTd>
                <MudTd><MudNumericField T="int" @bind-Value="item.NivelSegundoCobro" /></MudTd>
            </RowTemplate>
        </MudTable>
    </EditForm>

    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GuardarCambios" Class="mt-4">
        Guardar Cambios
    </MudButton>
</MudPaper>

@code {
    [Parameter]
    public List<NivelDTO> Model { get; set; } = new();

    [Parameter]
    public List<CentroOperativoDTO> Centros { get; set; } = new();

    [Parameter]
    public EventCallback OnGuardar { get; set; }


    private void AgregarNuevo()
    {
        var nueva = new NivelDTO();
        // nueva.Estado = true;
        Model.Add(nueva);
    }

    private async Task GuardarCambios()
    {
        var isValid = true;

        foreach (var excepcion in Model)
        {
            // excepcion.CreadoPor = await AuthService.GetUserNameAsync();
            var validationContext = new ValidationContext(excepcion);
            var results = new List<ValidationResult>();
            if (!Validator.TryValidateObject(excepcion, validationContext, results, true))
            {
                isValid = false;
            }
        }

        if (!isValid)
        {
            snackBarService.ShowSnackBar("Por favor llenar todos los campos.", Severity.Warning, Defaults.Classes.Position.TopEnd);
            return;
        }

        var result = await NivelService.Register(Model);
        if (result == "OK")
        {
            snackBarService.ShowSnackBar("El registro se ha actualizado exitosamente.", Severity.Success, Defaults.Classes.Position.TopEnd);
        }
        else
        {
            snackBarService.ShowSnackBar("Ha ocurrido un error al registrar la compañía.", Severity.Error, Defaults.Classes.Position.TopEnd);
        }
        await OnGuardar.InvokeAsync();
    }
}
