@using GrupoBIOS.Presentation.WebUI.Service.CentroOperativo
@using System.ComponentModel.DataAnnotations
@inject ICentroOperativoService CentroOperativoService;
@inject SnackBarService snackBarService
@inject IAuthService AuthService
<MudPaper Class="p-4">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AgregarNuevo">Nuevo</MudButton>

    <EditForm Model="Model">
        <MudTable Items="Model" Bordered="true" Elevation="0">
            <HeaderContent>
                <MudTh>ID Siesa</MudTh>
                <MudTh>Nombre</MudTh>
                <MudTh>Referencia Cobro</MudTh>
                <MudTh>Prefijo Facturación</MudTh>
                <MudTh>Motivo Facturación</MudTh>
                <MudTh>Bodega Especiales</MudTh>
                <MudTh>Correo</MudTh>
                <MudTh>Fecha Corte</MudTh>
                <MudTh>COBRO PNC</MudTh>
                <MudTh>Estado</MudTh>
                <MudTh>Acción</MudTh>
            </HeaderContent>
            <RowTemplate Context="item">
                <MudTd><MudTextField @bind-Value="item.IDSiesaCO" Immediate="true" /></MudTd>
                <MudTd><MudTextField @bind-Value="item.NombreCO" /></MudTd>
                <MudTd><MudTextField @bind-Value="item.ReferenciadeCobro" /></MudTd>
                <MudTd><MudTextField @bind-Value="item.PrefijodeFacturacion" /></MudTd>
                <MudTd><MudTextField @bind-Value="item.MotivodeFacturacion" /></MudTd>
                <MudTd><MudTextField @bind-Value="item.BodegaEspeciales" /></MudTd>
                <MudTd><MudTextField @bind-Value="item.CorreoEnvioReporte" /></MudTd>
                <MudTd><MudDatePicker @bind-Date="item.FechaInicialCorte" /></MudTd>
                <MudTd><MudNumericField T="int?" @bind-Value="item.CobroPNC" /></MudTd>
                <MudTd>
                    <MudChip T="string" Color="@(item.Estado == true ? Color.Success : Color.Default)">
                        @(item.Estado == true ? "Activo" : "Inactivo")
                    </MudChip>
                </MudTd>
                <MudTd>
                    <MudButton Color="@(item.Estado == true ? Color.Error : Color.Success)" OnClick="@(() => CambiarEstado(item))">
                        @(item.Estado == true ? "Inactivar" : "Activar")
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </EditForm>

    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GuardarCambios" Class="mt-4">
        Guardar Cambios
    </MudButton>
</MudPaper>

@code {
    [Parameter]
    public List<CentroOperativoDTO> Model { get; set; } = new List<CentroOperativoDTO>();

    [Parameter]
    public int IdCompania { get; set; } = 0;

    [Parameter]
    public EventCallback OnGuardar { get; set; }

    private void AgregarNuevo()
    {
        var nueva = new CentroOperativoDTO();
        nueva.Estado = true;
        nueva.IDCompania = IdCompania;
        Model.Add(nueva);
    }

    private void CambiarEstado(CentroOperativoDTO centro)
    {
        centro.Estado = !(centro.Estado ?? false);
    }

    private async Task GuardarCambios()
    {
        var isValid = true;

        foreach (var excepcion in Model)
        {
            excepcion.CreadoPor = await AuthService.GetUserNameAsync();
            var validationContext = new ValidationContext(excepcion);
            var results = new List<ValidationResult>();
            if (!Validator.TryValidateObject(excepcion, validationContext, results, true))
            {
                isValid = false;
            }
        }

        if (!isValid)
        {
            snackBarService.ShowSnackBar("Por favor llenar todos los campos.", Severity.Warning, Defaults.Classes.Position.TopEnd);
            return;
        }

        var result = await CentroOperativoService.Register(Model);
        if (result == "OK")
        {
            snackBarService.ShowSnackBar("El registro se ha actualizado exitosamente.", Severity.Success, Defaults.Classes.Position.TopEnd);
        }
        else
        {
            snackBarService.ShowSnackBar("Ha ocurrido un error al registrar la compañía.", Severity.Error, Defaults.Classes.Position.TopEnd);
        }
        // Luego de guardar, invocar el callback
        await OnGuardar.InvokeAsync();
    }
}
