<AuthorizeView>
    <Authorized>
        <MudContainer>
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h5" Align="Align.Center">"Hola, @userName"</MudText>
                        <MudText Typo="Typo.h6" Align="Align.Center">"Perfil: @perfil"</MudText>

                        <MudSpacer></MudSpacer>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CerrarSesion" FullWidth="true">
                            Cerrar Sesión
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </MudContainer>
        </Authorized>
        <NotAuthorized>
            <MudContainer>
                <MudStack>
                    <MudButton Href="/login" Variant="Variant.Filled" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.Login" />Iniciar Sesion </MudButton>
                    <MudButton Href="/register" Color="Color.Secondary" Variant="Variant.Filled"><MudIcon Icon="@Icons.Material.Filled.HowToReg" />Registrarse</MudButton>
                </MudStack>
            </MudContainer>
        </NotAuthorized>
    </AuthorizeView>

@code {
    private string? userName;
    private string? perfil;
    
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    
    [Inject]
    private IAuthService? AuthService { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;


    protected override async Task OnParametersSetAsync()
    {
        userName = await AuthService.GetNameAsync();
        perfil = await AuthService.GetUserRoleAsync();
    }

    private async Task CerrarSesion()
    {        
        await AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }



}
