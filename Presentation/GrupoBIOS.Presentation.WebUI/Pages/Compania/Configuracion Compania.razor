@page "/compania"

@using System.ComponentModel.DataAnnotations
@using GrupoBIOS.Presentation.WebUI.Components.Configuracion_Compania

@inject ICompanyService compService
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject SweetAlertService SweetAlert
@inject LoadingDialogService LoadingService
@inject SnackBarService snackBarService
@inject ShowDialogService showDialog
@inject ShowDialogService dialogService
@inject ISiesaService siesaService
@inject HttpClient httpClient
@inject IAuthService AuthService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-6">
    <MudPaper Elevation="10" Class="pa-4 rounded-lg">
        <!-- Título y Botón de Agregar -->
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h4" Color="Color.Primary">Configuración de Compañías</MudText>
        </div>
        <MudGrid>
            <MudItem xs="12" md="12">
                <MudSelect T="int"
                Value="IDSiesa"
                Label="Seleccione la compañía"
                Variant="Variant.Outlined"
                Immediate="true"
                ValidateOnBlur="true"
                Required="true"
                Error="@(IDSiesa == 0)"
                ErrorText="Debe seleccionar la compañía"
                ValueChanged="@(async (value) => {
                            IDSiesa = value;
                            _IDSiesa = value;
                            await LoadCompanyConfigurationByID(value);
                })">
                    <MudSelectItem T="int"
                    Value="0">Seleccione una opción</MudSelectItem>
                    @foreach (var item in companias)
                    {
                        <MudSelectItem T="int" Value="@item.f_cia">@item.f_razon_social</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        @if (IDSiesa != 0)
        {
            <MudGrid>
                <MudItem xs="12" class="d-flex justify-start mt-4">
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    ButtonType="ButtonType.Submit"
                    OnClick="HandleRegister">
                        Guardar
                    </MudButton>
                </MudItem>
            </MudGrid>
            <MudExpansionPanel Text="Compañía" ExpandIcon="@Icons.Material.Filled.KeyboardArrowDown">
                <Compania @ref="companyForm" Model="Model.Compania" />
            </MudExpansionPanel>
            <MudExpansionPanel Text="Configuración E-mail" ExpandIcon="@Icons.Material.Filled.KeyboardArrowDown">
                <Notificacion  @ref="notificationForm" Model="Model.Notificacion"/>
            </MudExpansionPanel>
            @if (Model.Compania.IDCompania>0)
            {
                <MudExpansionPanel Text="Excepciones" ExpandIcon="@Icons.Material.Filled.KeyboardArrowDown">
                    <Excepcion Model="Model.Excepciones" IdCompania="Model.Compania.IDCompania" OnGuardar="@RefrescarInformacion"/>
                </MudExpansionPanel>
                <MudExpansionPanel Text="Centros Operativos" ExpandIcon="@Icons.Material.Filled.KeyboardArrowDown">
                    <CentroOperativo Model="Model.CentrosOperativos" IdCompania="Model.Compania.IDCompania" OnGuardar="@RefrescarInformacion"/>
                </MudExpansionPanel>
            }

            @if (Model.CentrosOperativos.Count > 0)
            {
                <MudExpansionPanel Text="Niveles" ExpandIcon="@Icons.Material.Filled.KeyboardArrowDown">
                    <Nivel Model="Model.Niveles" Centros="Model.CentrosOperativos.Where(x=>x.Estado == true).ToList()" OnGuardar="@RefrescarInformacion"/>
                </MudExpansionPanel>
                <MudExpansionPanel Text="PNC" ExpandIcon="@Icons.Material.Filled.KeyboardArrowDown">
                    <PNC Model="Model.Pncs" Centros="Model.CentrosOperativos.Where(x=>x.Estado == true).ToList()" OnGuardar="@RefrescarInformacion"/>
                </MudExpansionPanel>
            }  
        }
    </MudPaper>
</MudContainer>

@code {
    private bool _isFormValid;
    private bool _shouldValidate = false;
    private bool _visible;
    private bool showValidation = false;
    private string? NombreUsuario { get; set; }
    private int _IDSiesa = 0;

    private MudForm _form;
    private ConfiguracionCompaniaDTO Model { get; set; } = new ConfiguracionCompaniaDTO();
    private Compania companyForm;
    private Notificacion notificationForm;
    private bool isSaving = false;
    private bool _formIsValid = false;


    string? errorMessage;
    bool isLoading = true;

    private string _searchString = string.Empty;
    private bool _sortNameByLength;
    private List<string> _events = new();

    private IEnumerable<CompaniaSiesaResponseDTO> companias = new List<CompaniaSiesaResponseDTO>();
    private int IDSiesa = 0;

    private readonly DialogOptions _dialogOptions = new()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
            Position = DialogPosition.Center,
            CloseButton = true
        };

    protected override async Task OnInitializedAsync()
    {
        Model.Compania.IDCompania = 0;        
        NombreUsuario = await AuthService.GetUserNameAsync();
        LoadingService.Show();
        await GetCompanias();
        IsFormValid();
        LoadingService.Hide();
    }


    // Método para verificar si el formulario es válido
    private bool IsFormValid()
    {


        // Verifica que todos los campos requeridos tengan valores
        return !string.IsNullOrWhiteSpace(Model.Compania.NombreCompania) &&
               Model.Compania.IDSiesa.HasValue && Model.Compania.IDSiesa > 0 &&
               !string.IsNullOrWhiteSpace(Model.Compania.NombreBD) &&
               !string.IsNullOrWhiteSpace(Model.Compania.NombreConexionBD) &&
               !string.IsNullOrWhiteSpace(Model.Compania.UrlWebServiceSiesa) &&
               !string.IsNullOrWhiteSpace(Model.Compania.UsuarioWebService) &&
               !string.IsNullOrWhiteSpace(Model.Compania.ClaveWebService)&&
               
               //Verificar campos de notificaciones
               !string.IsNullOrWhiteSpace(Model.Notificacion.Puerto.ToString())&&
               !string.IsNullOrWhiteSpace(Model.Notificacion.Host)&&
               !string.IsNullOrWhiteSpace(Model.Notificacion.EmailRemitente)&&
               !string.IsNullOrWhiteSpace(Model.Notificacion.NombreRemitente)&&
               !string.IsNullOrWhiteSpace(Model.Notificacion.UsuarioEmail)&&
               !string.IsNullOrWhiteSpace(Model.Notificacion.ContrasenaEmail);
    }

    private async Task LoadCompanyConfigurationByID(int IDSiesa)
    {
        try
        {
            var resp = await compService.GetConfiguracionCompaniaId(IDSiesa);

            if (resp?.Data != null)
            {
                Model = resp.Data;                
                await Task.Delay(100); // Pequeño delay para asegurar renderizado
                StateHasChanged();
            }
            else
            {
                Model = new ConfiguracionCompaniaDTO();                
                await Task.Delay(100); // Pequeño delay para asegurar renderizado
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await SweetAlert.ShowErrorAsync("Error", ex.Message);
        }
    }


    async Task GetCompanias()
    {
        var resp = await siesaService.GetListCompaniaAsync();
        if (resp.IsSuccess)
        {
            companias = resp.Data!;            
        }
        else
        {
            snackBarService.ShowSnackBar("Ha ocurrido un error inesperado.", Severity.Error, Defaults.Classes.Position.TopEnd);
        }
    }


    private void CloseDialog()
    {
        _visible = false;
    }

    async Task<string> HandleRegister()
    {
        showValidation = true;
        string response = string.Empty;
        Model.Compania = companyForm.GetCompanyData();
        Model.Notificacion = notificationForm.GetNotificationData();
        if (!IsFormValid())
        {
            snackBarService.ShowSnackBar("Se deben llenar todos los campos requeridos.", Severity.Error, Defaults.Classes.Position.TopEnd);
            return response;
        }

        response = await HandleUpdate();
        if (response == "OK")
        {
            CloseDialog();
            snackBarService.ShowSnackBar("El registro se ha actualizado exitosamente.", Severity.Success, Defaults.Classes.Position.TopEnd);
            showValidation = false;
        }
        else
        {
            showValidation = false;
            snackBarService.ShowSnackBar("Ha ocurrido un error al registrar la compañía.", Severity.Error, Defaults.Classes.Position.TopEnd);
        }

        return response;
    }

    public async Task<string> HandleUpdate()
    {
        LoadingService.Show();

        showValidation = true;

        Model.Compania.CreadoPor = NombreUsuario!;
        Model.Notificacion.CreadoPor = NombreUsuario!;
        Model.Compania.Estado = true;
        Model.Compania.IDSiesa = IDSiesa;

        var result = await compService.ConfigurarCompania(Model);
        LoadingService.Hide();

        return result!;
    }

    private async Task RefrescarInformacion()
    {
        await LoadCompanyConfigurationByID(_IDSiesa); 
        StateHasChanged(); 
    }
}
